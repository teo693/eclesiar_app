#!/usr/bin/env python3
"""
G≈Ç√≥wny punkt wej≈õcia do aplikacji Eclesiar.
Zapewnia czysty interfejs do wszystkich funkcjonalno≈õci.
"""

import os
import sys
import argparse
from datetime import datetime

from orchestrator import run as run_orchestrator
from production_analyzer_consolidated import ProductionAnalyzer
from arbitrage_analyzer_consolidated import CurrencyArbitrageAnalyzer


def get_report_sections() -> dict:
    """Pobiera od u≈ºytkownika informacje o sekcjach do zawarcia w raporcie"""
    sections = {
        'military': True,
        'warriors': True, 
        'economic': True,
        'production': True
    }
    
    print("\nüìã Wybierz sekcje do zawarcia w raporcie:")
    print("1. ‚öîÔ∏è Sekcja militarna (statystyki wojenne, wojny)")
    print("2. üèÜ Sekcja wojownik√≥w (ranking bohater√≥w)")
    print("3. üí∞ Sekcja ekonomiczna (kursy walut, oferty pracy, towary)")
    print("4. üè≠ Analiza produktywno≈õci region√≥w")
    print("5. ‚úÖ Wszystkie sekcje (domy≈õlnie)")
    print("6. ‚ùå Tylko sekcja militarna")
    
    choice = input("\nWybierz opcjƒô (1-6): ").strip()
    
    if choice == '1':
        sections = {'military': True, 'warriors': False, 'economic': False, 'production': False}
    elif choice == '2':
        sections = {'military': False, 'warriors': True, 'economic': False, 'production': False}
    elif choice == '3':
        sections = {'military': False, 'warriors': False, 'economic': True, 'production': False}
    elif choice == '4':
        sections = {'military': False, 'warriors': False, 'economic': False, 'production': True}
    elif choice == '6':
        sections = {'military': True, 'warriors': False, 'economic': False, 'production': False}
    # choice == '5' lub domy≈õlnie - wszystkie sekcje
    
    # Poka≈º wybrane sekcje
    selected = []
    if sections['military']:
        selected.append("‚öîÔ∏è Militarna")
    if sections['warriors']:
        selected.append("üèÜ Wojownicy")
    if sections['economic']:
        selected.append("üí∞ Ekonomiczna")
    if sections['production']:
        selected.append("üè≠ Produktywno≈õƒá")
    
    print(f"‚úÖ Wybrane sekcje: {', '.join(selected)}")
    return sections


def run_production_analysis(output_dir: str) -> None:
    """Uruchamia analizƒô produktywno≈õci region√≥w"""
    print("üè≠ Analiza produktywno≈õci region√≥w...")
    analyzer = ProductionAnalyzer()
    # Tutaj mo≈ºesz dodaƒá logikƒô do pobierania danych region√≥w
    print("‚úÖ Analiza produktywno≈õci zako≈Ñczona")


def run_arbitrage_analysis(output_dir: str, min_profit: float) -> None:
    """Uruchamia analizƒô arbitra≈ºu walutowego"""
    print("üí∞ Analiza arbitra≈ºu walutowego...")
    analyzer = CurrencyArbitrageAnalyzer(min_profit_threshold=min_profit)
    opportunities = analyzer.find_arbitrage_opportunities()
    
    if opportunities:
        print(f"‚úÖ Znaleziono {len(opportunities)} okazji arbitra≈ºowych")
        # Generuj raporty
        csv_result = analyzer.generate_arbitrage_report(opportunities, "csv")
        txt_result = analyzer.generate_arbitrage_report(opportunities, "txt")
        print(f"üìä {csv_result}")
        print(f"üìÑ {txt_result}")
    else:
        print("‚ùå Nie znaleziono okazji arbitra≈ºowych")


def run_orchestrator_html(output_dir: str, sections: dict = None) -> None:
    """Uruchamia orchestrator z generowaniem raportu HTML"""
    print("üåê Generowanie dziennego raportu HTML...")
    from orchestrator import run_html as run_orchestrator_html_func
    run_orchestrator_html_func(output_dir, sections)


def run_full_analysis(output_dir: str, min_profit: float, sections: dict = None) -> None:
    """Uruchamia pe≈ÇnƒÖ analizƒô - wszystkie modu≈Çy"""
    print("üîÑ Pe≈Çna analiza - wszystkie modu≈Çy...")
    
    # 1. Dzienny raport
    print("\nüìã 1/3 Generowanie dziennego raportu...")
    run_orchestrator(sections)
    
    # 2. Analiza produktywno≈õci
    print("\nüè≠ 2/3 Analiza produktywno≈õci region√≥w...")
    run_production_analysis(output_dir)
    
    # 3. Analiza arbitra≈ºu
    print("\nüí∞ 3/3 Analiza arbitra≈ºu walutowego...")
    run_arbitrage_analysis(output_dir, min_profit)


def interactive_menu():
    """Interaktywne menu aplikacji"""
    print("üöÄ Witaj w aplikacji Eclesiar!")
    print("=" * 50)
    
    while True:
        print("\nüìã Co chcesz zrobiƒá?")
        print("1. üìä Generuj dzienny raport (DOCX)")
        print("2. üåê Generuj dzienny raport (HTML)")
        print("3. üè≠ Analiza produktywno≈õci region√≥w")
        print("4. üí∞ Analiza arbitra≈ºu walutowego")
        print("5. üîÑ Pe≈Çna analiza (wszystko)")
        print("6. ‚ùå Wyj≈õcie")
        
        choice = input("\nWybierz opcjƒô (1-6): ").strip()
        
        if choice == '1':
            output_dir = input("üìÅ Katalog wyj≈õciowy (domy≈õlnie: reports): ").strip() or 'reports'
            sections = get_report_sections()
            print("üìã Generowanie dziennego raportu DOCX...")
            run_orchestrator(sections)
            
        elif choice == '2':
            output_dir = input("üìÅ Katalog wyj≈õciowy (domy≈õlnie: reports): ").strip() or 'reports'
            sections = get_report_sections()
            print("üåê Generowanie dziennego raportu HTML...")
            run_orchestrator_html(output_dir, sections)
            
        elif choice == '3':
            output_dir = input("üìÅ Katalog wyj≈õciowy (domy≈õlnie: reports): ").strip() or 'reports'
            run_production_analysis(output_dir)
            
        elif choice == '4':
            output_dir = input("üìÅ Katalog wyj≈õciowy (domy≈õlnie: reports): ").strip() or 'reports'
            min_profit = input("üí∞ Minimalny pr√≥g zysku w % (domy≈õlnie: 0.5): ").strip()
            try:
                min_profit = float(min_profit) if min_profit else 0.5
            except ValueError:
                min_profit = 0.5
            run_arbitrage_analysis(output_dir, min_profit)
            
        elif choice == '5':
            output_dir = input("üìÅ Katalog wyj≈õciowy (domy≈õlnie: reports): ").strip() or 'reports'
            min_profit = input("üí∞ Minimalny pr√≥g zysku w % (domy≈õlnie: 0.5): ").strip()
            try:
                min_profit = float(min_profit) if min_profit else 0.5
            except ValueError:
                min_profit = 0.5
            sections = get_report_sections()
            run_full_analysis(output_dir, min_profit, sections)
            
        elif choice == '6':
            print("üëã Dziƒôkujemy za korzystanie z aplikacji Eclesiar!")
            break
            
        else:
            print("‚ùå Nieprawid≈Çowy wyb√≥r. Spr√≥buj ponownie.")
            continue
        
        # Utw√≥rz katalog wyj≈õciowy je≈õli nie istnieje
        if not os.path.exists(output_dir):
            os.makedirs(output_dir)
            print(f"üìÅ Utworzono katalog: {output_dir}")
        
        print(f"\n‚úÖ Operacja zako≈Ñczona pomy≈õlnie!")
        print(f"‚è∞ Czas zako≈Ñczenia: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
        # Zapytaj czy kontynuowaƒá
        continue_choice = input("\nüîÑ Czy chcesz wykonaƒá kolejnƒÖ operacjƒô? (t/n): ").strip().lower()
        if continue_choice not in ['t', 'tak', 'y', 'yes']:
            print("üëã Dziƒôkujemy za korzystanie z aplikacji Eclesiar!")
            break


def main():
    """G≈Ç√≥wna funkcja aplikacji"""
    # Sprawd≈∫ czy sƒÖ argumenty wiersza polece≈Ñ
    if len(sys.argv) > 1:
        # Tryb argument√≥w wiersza polece≈Ñ (stary spos√≥b)
        parser = argparse.ArgumentParser(
            description="Aplikacja Eclesiar - analiza danych gry",
            formatter_class=argparse.RawDescriptionHelpFormatter,
            epilog="""
Przyk≈Çady u≈ºycia:
  python main.py daily-report          # Generuj dzienny raport
  python main.py production-analysis   # Analiza produktywno≈õci region√≥w
  python main.py arbitrage-analysis    # Analiza arbitra≈ºu walutowego
  python main.py full-analysis         # Pe≈Çna analiza (wszystko)
  python main.py                       # Tryb interaktywny
            """
        )
        
        parser.add_argument(
            'command',
            choices=['daily-report', 'production-analysis', 'arbitrage-analysis', 'full-analysis'],
            help='Komenda do wykonania'
        )
        
        parser.add_argument(
            '--output-dir',
            default='reports',
            help='Katalog wyj≈õciowy dla raport√≥w (domy≈õlnie: reports)'
        )
        
        parser.add_argument(
            '--min-profit',
            type=float,
            default=0.5,
            help='Minimalny pr√≥g zysku dla arbitra≈ºu w %% (domy≈õlnie: 0.5)'
        )
        
        args = parser.parse_args()
        
        # Utw√≥rz katalog wyj≈õciowy je≈õli nie istnieje
        if not os.path.exists(args.output_dir):
            os.makedirs(args.output_dir)
            print(f"üìÅ Utworzono katalog: {args.output_dir}")
        
        print(f"üöÄ Uruchamianie aplikacji Eclesiar...")
        print(f"üìä Komenda: {args.command}")
        print(f"üìÅ Katalog wyj≈õciowy: {args.output_dir}")
        print(f"‚è∞ Czas rozpoczƒôcia: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print("-" * 60)
        
        try:
            if args.command == 'daily-report':
                print("üìã Generowanie dziennego raportu...")
                # Dla trybu wiersza polece≈Ñ, u≈ºywamy wszystkich sekcji domy≈õlnie
                sections = {
                    'military': True,
                    'warriors': True, 
                    'economic': True,
                    'production': True
                }
                run_orchestrator(sections)
                
            elif args.command == 'production-analysis':
                run_production_analysis(args.output_dir)
                    
            elif args.command == 'arbitrage-analysis':
                run_arbitrage_analysis(args.output_dir, args.min_profit)
                    
            elif args.command == 'full-analysis':
                # Dla trybu wiersza polece≈Ñ, u≈ºywamy wszystkich sekcji domy≈õlnie
                sections = {
                    'military': True,
                    'warriors': True, 
                    'economic': True,
                    'production': True
                }
                run_full_analysis(args.output_dir, args.min_profit, sections)
            
            print(f"\n‚úÖ Analiza zako≈Ñczona pomy≈õlnie!")
            print(f"‚è∞ Czas zako≈Ñczenia: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
            
        except KeyboardInterrupt:
            print("\n‚ö†Ô∏è Analiza zosta≈Ça przerwana przez u≈ºytkownika")
            sys.exit(1)
        except Exception as e:
            print(f"\n‚ùå B≈ÇƒÖd podczas wykonywania analizy: {e}")
            sys.exit(1)
    else:
        # Tryb interaktywny
        try:
            interactive_menu()
        except KeyboardInterrupt:
            print("\n‚ö†Ô∏è Program zosta≈Ç przerwany przez u≈ºytkownika")
            sys.exit(1)
        except Exception as e:
            print(f"\n‚ùå B≈ÇƒÖd podczas wykonywania programu: {e}")
            sys.exit(1)


if __name__ == "__main__":
    main()
